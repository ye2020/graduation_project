/****************************** Y.Z.T.****************************************
  * @file       usr_irremote.c/h
  * @brief      遥控 , 红外发射与接收解析
  * @note
  * @history    2023.9.25
  *
  @verbatim     v1.0
  ==============================================================================

  ==============================================================================
  @endverbatim
  ****************************** Y.Z.T. *****************************************
  */
#include "usr_irremote.h"
#include <IRremoteESP8266.h>        // ESP8266 红外控制库
#include <IRsend.h>                 // 红外发射库
#include <IRrecv.h>                 // 红外接收库
#include <ir_Gree.h>                // 格力空调库

#if 0

const uint16_t kRecvPin = 5;        // 接收io
const uint16_t ksendPin = 14;       // 发送io

IRGreeAC gree_ac(ksendPin);         // 创建一个格力空调的实例 
IRrecv irrecv(kRecvPin);            // 创建一个接收实例
IRsend irsend(ksendPin);

decode_results results;             // 接收区

uint16_t rawData_on[279] = {9044, 4454,  646, 1644,  646, 568,  620, 568,  622, 1668,  622, 568,  622, 568,  622, 1666,  622, 568,  620, 568,  620, 1668,  622, 568,  622, 1668,  620, 568,  620, 568,  622, 568,  620, 568,  620, 570,  620, 568,  622, 568,  622, 568,  620, 568,  622, 1668,  620, 570,  620, 568,  620, 570,  620, 570,  622, 568,  620, 568,  620, 1668,  620, 570,  620, 1668,  622, 568,  620, 568,  620, 1668,  620, 570,  620, 19988,  622, 1668,  622, 568,  622, 568,  620, 568,  620, 1668,  620, 568,  622, 568,  622, 568,  622, 568,  620, 568,  620, 568,  620, 570,  620, 568,  620, 1668,  620, 568,  620, 568,  620, 568,  622, 568,  620, 568,  620, 568,  620, 570,  620, 568,  622, 568,  620, 568,  622, 568,  620, 568,  620, 570,  620, 568,  620, 570,  620, 568,  620, 568,  620, 568,  620, 39962,  9042, 4484,  620, 1668,  620, 568,  622, 568,  620, 1668,  620, 568,  620, 568,  620, 1668,  622, 568,  620, 568,  620, 1668,  622, 568,  620, 1668,  622, 568,  620, 568,  620, 568,  620, 568,  620, 568,  620, 570,  620, 570,  620, 568,  620, 568,  620, 1668,  622, 568,  620, 570,  620, 568,  620, 568,  620, 568,  620, 568,  620, 1668,  620, 1668,  620, 1668,  620, 568,  620, 570,  620, 1668,  622, 568,  620, 19988,  620, 568,  622, 568,  620, 568,  620, 568,  622, 568,  622, 568,  622, 568,  620, 568,  622, 568,  620, 570,  620, 568,  620, 568,  620, 568,  620, 570,  620, 568,  622, 568,  620, 568,  620, 568,  620, 568,  620, 570,  620, 570,  620, 570,  618, 568,  620, 568,  620, 570,  620, 568,  620, 570,  620, 568,  620, 1668,  620, 570,  620, 1668,  620, 1668,  622};  // KELVINATOR

uint16_t rawData_off[279] = {9046, 4482,  620, 1668,  620, 568,  620, 568,  620, 568,  620, 568,  620, 570,  620, 568,  620, 568,  620, 568,  622, 1668,  620, 568,  620, 1668,  620, 570,  620, 570,  620, 568,  620, 568,  620, 568,  620, 568,  620, 568,  620, 568,  620, 570,  620, 1670,  618, 570,  620, 570,  620, 568,  620, 570,  620, 568,  620, 568,  622, 1668,  620, 568,  622, 1668,  620, 570,  620, 568,  620, 1670,  620, 568,  620, 19988,  620, 568,  620, 570,  620, 568,  622, 568,  620, 1668,  620, 568,  620, 568,  620, 568,  620, 570,  620, 568,  620, 568,  620, 570,  620, 568,  620, 1670,  620, 568,  620, 570,  620, 570,  620, 568,  620, 570,  620, 568,  620, 568,  620, 570,  620, 568,  620, 568,  620, 570,  620, 568,  620, 568,  622, 568,  620, 570,  622, 568,  620, 570,  620, 1668,  620, 39966,  9038, 4484,  620, 1670,  620, 568,  620, 570,  620, 570,  620, 570,  620, 568,  620, 568,  620, 570,  620, 570,  620, 1668,  620, 568,  620, 1668,  620, 570,  620, 568,  620, 570,  620, 568,  620, 568,  620, 570,  620, 570,  620, 570,  620, 568,  620, 1670,  618, 570,  620, 568,  620, 570,  620, 570,  620, 568,  620, 568,  620, 1668,  620, 1668,  620, 1670,  620, 568,  622, 568,  620, 1668,  620, 568,  622, 19988,  620, 570,  620, 568,  620, 568,  620, 570,  620, 570,  620, 568,  620, 568,  620, 568,  620, 568,  620, 570,  620, 568,  620, 570,  620, 568,  620, 568,  620, 570,  620, 570,  620, 570,  620, 568,  620, 570,  620, 568,  620, 570,  620, 570,  618, 568,  620, 568,  620, 570,  620, 570,  620, 568,  622, 568,  620, 1670,  620, 568,  620, 1670,  620, 568,  620};  // KELVINATOR
uint16_t rawData_dowm[279] = {9048, 4454,  648, 1640,  648, 566,  624, 564,  624, 1642,  648, 566,  624, 566,  624, 566,  624, 566,  624, 1666,  624, 566,  624, 566,  624, 1666,  624, 566,  624, 566,  624, 566,  624, 566,  624, 566,  624, 566,  624, 564,  624, 566,  624, 566,  622, 1666,  624, 566,  624, 566,  624, 566,  624, 566,  622, 566,  624, 566,  622, 1668,  622, 566,  622, 1666,  624, 566,  624, 566,  624, 1666,  624, 566,  624, 19962,  646, 566,  624, 566,  622, 566,  622, 566,  622, 1666,  624, 566,  624, 566,  624, 566,  622, 566,  622, 566,  622, 566,  622, 566,  622, 566,  622, 1666,  624, 566,  622, 566,  622, 566,  624, 566,  622, 566,  622, 566,  624, 566,  622, 566,  622, 566,  622, 566,  622, 566,  622, 566,  624, 564,  622, 566,  624, 1664,  624, 1666,  622, 1666,  622, 1666,  624, 39960,  9044, 4456,  648, 1642,  648, 564,  624, 566,  622, 1666,  622, 566,  622, 566,  624, 564,  622, 566,  624, 1666,  624, 566,  624, 566,  624, 1666,  624, 566,  624, 566,  624, 566,  622, 568,  622, 566,  622, 566,  624, 566,  624, 566,  624, 564,  624, 1666,  624, 566,  624, 566,  622, 566,  624, 566,  622, 566,  622, 566,  624, 1666,  624, 1666,  624, 1666,  624, 566,  622, 566,  622, 1668,  622, 568,  622, 19962,  646, 566,  622, 566,  622, 566,  624, 566,  624, 566,  622, 566,  622, 566,  622, 566,  622, 568,  622, 566,  624, 566,  624, 566,  622, 566,  622, 566,  624, 566,  624, 566,  622, 566,  622, 566,  624, 566,  622, 566,  622, 566,  622, 566,  622, 566,  622, 568,  622, 566,  622, 566,  622, 566,  622, 566,  624, 566,  624, 566,  622, 1666,  624, 1666,  624};  // KELVINATOR
uint16_t rawData_up[279] = {9048, 4452,  650, 1640,  650, 540,  648, 566,  624, 1640,  648, 564,  624, 564,  624, 564,  626, 564,  624, 1640,  648, 1664,  624, 566,  624, 1640,  648, 566,  624, 566,  622, 566,  624, 566,  624, 564,  624, 566,  624, 566,  624, 564,  624, 566,  624, 1664,  624, 566,  624, 564,  624, 566,  622, 566,  624, 564,  624, 566,  624, 1666,  624, 566,  622, 1666,  622, 566,  624, 566,  624, 1666,  624, 566,  622, 19986,  624, 566,  624, 566,  624, 564,  624, 564,  624, 1664,  624, 566,  624, 566,  624, 564,  624, 566,  624, 566,  622, 566,  624, 566,  622, 566,  624, 1666,  624, 566,  624, 566,  624, 566,  624, 564,  624, 566,  624, 566,  624, 566,  624, 566,  622, 566,  622, 566,  624, 566,  622, 566,  624, 566,  624, 566,  624, 1666,  624, 566,  624, 566,  624, 566,  624, 39960,  9044, 4456,  648, 1640,  648, 564,  624, 564,  624, 1664,  624, 566,  624, 566,  624, 564,  624, 566,  624, 1664,  624, 1664,  624, 564,  624, 1664,  624, 566,  624, 566,  622, 566,  624, 566,  624, 564,  624, 566,  624, 566,  622, 566,  624, 566,  624, 1664,  624, 566,  624, 566,  624, 566,  624, 566,  622, 566,  622, 566,  624, 1666,  624, 1666,  624, 1666,  624, 566,  624, 566,  622, 1666,  624, 566,  622, 19984,  624, 566,  624, 566,  624, 566,  622, 566,  624, 566,  624, 566,  624, 566,  624, 564,  624, 564,  624, 566,  622, 566,  624, 566,  624, 564,  624, 566,  624, 566,  622, 566,  624, 566,  622, 566,  624, 566,  624, 566,  622, 566,  624, 566,  624, 566,  622, 566,  624, 566,  622, 566,  624, 566,  622, 566,  624, 566,  622, 1666,  624, 1666,  622, 1666,  624};  // KELVINATOR


void (*ac_func[3])(void) = {IR_power_send_2, IR_temp_up_send_2, IR_temp_dowm_send_2};           // 函数指针数组

    

// 红外接收初始化
void IR_init(void)
{
    gree_ac.begin();                // 开启空调红外 
    irrecv.enableIRIn();             // 启动红外接收
}

void IR_receive(void)
{
    if(irrecv.decode(&results)) 
    {
        Serial.println(results.value, HEX);
        Serial.println("");
        irrecv.resume();            // 接收下一个值
    }
}

// 发送开启指令
void IR_on_send(void)
{
    gree_ac.on();
    // Serial.println(gree_ac.toString());         //显示发送的空调开机红外编码
    gree_ac.send();                             //发送红外命令
    // delay(2000);                             //测试阶段每两秒发一次
}

// 发送关闭指令
void IR_off_send(void)
{
    gree_ac.off();
    // Serial.println(gree_ac.toString());         //显示发送的空调开机红外编码
    gree_ac.send();                             //发送红外命令
}

// 发送升温指令
void IR_temp_up_send(void)
{
    uint8_t temp;
    temp = gree_ac.getTemp();
    gree_ac.setTemp(temp + 1);
    // Serial.println(gree_ac.toString());         //显示发送的空调开机红外编码
    gree_ac.send();                             //发送红外命令
    Serial.println("ac up");
}

// 发送降温指令
void IR_temp_dowm_send(void)
{
    uint8_t temp;
    temp = gree_ac.getTemp();
    gree_ac.setTemp(temp - 1);
    // Serial.println(gree_ac.toString());         //显示发送的空调开机红外编码
    gree_ac.send();                             //发送红外命令
    Serial.println("ac dowm");
}


// 开或关指令
void IR_power_send(void)
{
    if(gree_ac.getPower())
    {
        IR_on_send();
        Serial.println("ac on");
    }
    else
    {
        IR_off_send();
        Serial.println("ac off");
    }
}


/****************************** 版本2 *************************************/

void IR_on_send_2(void)
{
    pinMode(ksendPin,OUTPUT);
    digitalWrite(ksendPin,0);
    delay(400);
    irsend.sendRaw(rawData_on,279,38);
    Serial.println("on"); 
}

void IR_off_send_2(void)
{
    pinMode(ksendPin,OUTPUT);
    digitalWrite(ksendPin,0);
    delay(400);
    irsend.sendRaw(rawData_off,279,38);
    Serial.println("off"); 
}

void IR_power_send_2(void)
{
    static bool i = 0;
    if( i == 0) {
        IR_on_send_2();
        i = 1;
    } else {
        IR_off_send_2();
        i = 0;
    }
}

// 发送降温指令
void IR_temp_dowm_send_2(void)
{
    pinMode(ksendPin,OUTPUT);
    digitalWrite(ksendPin,0);
    delay(400);
    irsend.sendRaw(rawData_dowm,279,38);
    Serial.println("dowm"); 

}

// 发送升温指令
void IR_temp_up_send_2(void)
{
    pinMode(ksendPin,OUTPUT);
    digitalWrite(ksendPin,0);
    delay(400);
    irsend.sendRaw(rawData_up,279,38);
    Serial.println("up"); 
}

#endif